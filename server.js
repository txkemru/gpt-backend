// server.js
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import fetch from 'node-fetch';
import multer from 'multer';
import FormData from 'form-data';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// –¥–ª—è multipart/form-data
const upload = multer();

app.use(cors());
app.use(express.json());

// 1) –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç /gpt –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
app.post('/gpt', async (req, res) => {
  const userText = req.body.text;
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: `–¢—ã ‚Äî –∂–∏–≤–æ–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö–æ–≥–¥–∞ —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –∫–∞–∫—É—é-—Ç–æ –∏–¥–µ—é, –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, —Ç—ã:

            1. –ë–ª–∞–≥–æ–¥–∞—Ä–∏—à—å –∏ —Ä–µ–∞–≥–∏—Ä—É–µ—à—å –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–û–≥–æ, –∫–ª–∞—Å—Å–Ω–∞—è –ø–æ–¥–∞—á–∞! üëè").
            2. –ö—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–µ—à—å, –æ —á—ë–º —à–ª–∞ —Ä–µ—á—å (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
            3. –ü–æ—Ç–æ–º –∑–∞–¥–∞—ë—à—å 2‚Äì3 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö, –ø–æ–Ω—è—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É –ø–æ–¥—É–º–∞—Ç—å –≥–ª—É–±–∂–µ.
            
            –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏. –°—Ç–∏–ª—å ‚Äî –ª—ë–≥–∫–∏–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π, –±—É–¥—Ç–æ —Ç—ã –ø–∏—à–µ—à—å –¥—Ä—É–≥—É –≤ Telegram.
            
            –ü—Ä–∏–º–µ—Ä:
            –û–≥–æ, –∫–ª–∞—Å—Å–Ω–∞—è –ø–æ–¥–∞—á–∞! üëè  
            –¢—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª –ø—Ä–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –∏–¥–µ–∏ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –∏—Ö –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò.  
            –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–∞–∑—É –ø—Ä–∏—à–ª–∏ –≤ –≥–æ–ª–æ–≤—É:  
            1. ...  
            2. ...  
            3. ...`
             },
          { role: 'user', content: userText },
        ],
        temperature: 0.7,
      }),
    });
    const data = await response.json();
    res.json({ reply: data.choices?.[0]?.message?.content });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ GPT:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT' });
  }
});

// 2) –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç /transcribe –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper
app.post('/transcribe', upload.single('file'), async (req, res) => {
  try {
    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º FormData –¥–ª—è OpenAI
    const form = new FormData();
    form.append('file', req.file.buffer, req.file.originalname);
    form.append('model', 'whisper-1');

    const aiRes = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        ...form.getHeaders(),
      },
      body: form
    });

    const aiData = await aiRes.json();
    res.json({ text: aiData.text });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ' });
  }
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`GPT backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç ${PORT}`);
});

